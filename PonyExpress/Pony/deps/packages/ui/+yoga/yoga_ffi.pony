use "yoga"
use "utility"

// These are autogenerated in the pony.yoga project, but apparently use @definitions don't cross the package barrier.

use @YGNodeNew[Pointer[YGNode]]()
use @YGNodeNewWithConfig[Pointer[YGNode]](config:Pointer[YGConfig] tag)
use @YGNodeClone[Pointer[YGNode]](node:Pointer[YGNode] tag)
use @YGNodeFree[None](node:Pointer[YGNode] tag)
use @YGNodeFreeRecursiveWithCleanupFunc[None](node:Pointer[YGNode] tag, cleanup:Pointer[None] tag)
use @YGNodeFreeRecursive[None](node:Pointer[YGNode] tag)
use @YGNodeReset[None](node:Pointer[YGNode] tag)
use @YGNodeInsertChild[None](node:Pointer[YGNode] tag, child:Pointer[YGNode] tag, index:U64)
use @YGNodeSwapChild[None](node:Pointer[YGNode] tag, child:Pointer[YGNode] tag, index:U64)
use @YGNodeRemoveChild[None](node:Pointer[YGNode] tag, child:Pointer[YGNode] tag)
use @YGNodeRemoveAllChildren[None](node:Pointer[YGNode] tag)
use @YGNodeGetChild[Pointer[YGNode]](node:Pointer[YGNode] tag, index:U64)
use @YGNodeGetOwner[Pointer[YGNode]](node:Pointer[YGNode] tag)
use @YGNodeGetParent[Pointer[YGNode]](node:Pointer[YGNode] tag)
use @YGNodeGetChildCount[U64](node:Pointer[YGNode] tag)
use @YGNodeSetIsReferenceBaseline[None](node:Pointer[YGNode] tag, isReferenceBaseline:U32)
use @YGNodeIsReferenceBaseline[U32](node:Pointer[YGNode] tag)
use @YGNodeCalculateLayout[None](node:Pointer[YGNode] tag, availableWidth:F32, availableHeight:F32, ownerDirection:U32)
use @YGNodeMarkDirty[None](node:Pointer[YGNode] tag)
use @YGNodeMarkDirtyAndPropogateToDescendants[None](node:Pointer[YGNode] tag)
use @YGNodePrint[None](node:Pointer[YGNode] tag, options:U32)
use @YGNodePrintString[Pointer[U8]](node:Pointer[YGNode] tag, options:U32)
use @YGFloatIsUndefined[U32](value:F32)
use @YGNodeCanUseCachedMeasurement[U32](widthMode:U32, width:F32, heightMode:U32, height:F32, lastWidthMode:U32, lastWidth:F32, lastHeightMode:U32, lastHeight:F32, lastComputedWidth:F32, lastComputedHeight:F32, marginRow:F32, marginColumn:F32, config:Pointer[YGConfig] tag)
use @YGNodeCopyStyle[None](dstNode:Pointer[YGNode] tag, srcNode:Pointer[YGNode] tag)
use @YGNodeGetContext[Pointer[None]](node:Pointer[YGNode] tag)
use @YGNodeSetContext[None](node:Pointer[YGNode] tag, context:Pointer[None] tag)
use @YGConfigSetPrintTreeFlag[None](config:Pointer[YGConfig] tag, enabled:U32)
use @YGNodeHasMeasureFunc[U32](node:Pointer[YGNode] tag)
use @YGNodeSetMeasureFunc[None](node:Pointer[YGNode] tag, measureFunc:U32)
use @YGNodeHasBaselineFunc[U32](node:Pointer[YGNode] tag)
use @YGNodeSetBaselineFunc[None](node:Pointer[YGNode] tag, baselineFunc:Pointer[None] tag)
use @YGNodeGetDirtiedFunc[Pointer[None]](node:Pointer[YGNode] tag)
use @YGNodeSetDirtiedFunc[None](node:Pointer[YGNode] tag, dirtiedFunc:Pointer[None] tag)
use @YGNodeSetPrintFunc[None](node:Pointer[YGNode] tag, printFunc:Pointer[None] tag)
use @YGNodeGetHasNewLayout[U32](node:Pointer[YGNode] tag)
use @YGNodeSetHasNewLayout[None](node:Pointer[YGNode] tag, hasNewLayout:U32)
use @YGNodeGetNodeType[U32](node:Pointer[YGNode] tag)
use @YGNodeSetNodeType[None](node:Pointer[YGNode] tag, nodeType:U32)
use @YGNodeIsDirty[U32](node:Pointer[YGNode] tag)
use @YGNodeLayoutGetDidUseLegacyFlag[U32](node:Pointer[YGNode] tag)
use @YGNodeStyleSetDirection[None](node:Pointer[YGNode] tag, direction:U32)
use @YGNodeStyleGetDirection[U32](node:Pointer[YGNode] tag)
use @YGNodeStyleSetFlexDirection[None](node:Pointer[YGNode] tag, flexDirection:U32)
use @YGNodeStyleGetFlexDirection[U32](node:Pointer[YGNode] tag)
use @YGNodeStyleSetJustifyContent[None](node:Pointer[YGNode] tag, justifyContent:U32)
use @YGNodeStyleGetJustifyContent[U32](node:Pointer[YGNode] tag)
use @YGNodeStyleSetAlignContent[None](node:Pointer[YGNode] tag, alignContent:U32)
use @YGNodeStyleGetAlignContent[U32](node:Pointer[YGNode] tag)
use @YGNodeStyleSetAlignItems[None](node:Pointer[YGNode] tag, alignItems:U32)
use @YGNodeStyleGetAlignItems[U32](node:Pointer[YGNode] tag)
use @YGNodeStyleSetAlignSelf[None](node:Pointer[YGNode] tag, alignSelf:U32)
use @YGNodeStyleGetAlignSelf[U32](node:Pointer[YGNode] tag)
use @YGNodeStyleSetPositionType[None](node:Pointer[YGNode] tag, positionType:U32)
use @YGNodeStyleGetPositionType[U32](node:Pointer[YGNode] tag)
use @YGNodeStyleSetFlexWrap[None](node:Pointer[YGNode] tag, flexWrap:U32)
use @YGNodeStyleGetFlexWrap[U32](node:Pointer[YGNode] tag)
use @YGNodeStyleSetOverflow[None](node:Pointer[YGNode] tag, overflow:U32)
use @YGNodeStyleGetOverflow[U32](node:Pointer[YGNode] tag)
use @YGNodeStyleSetDisplay[None](node:Pointer[YGNode] tag, display:U32)
use @YGNodeStyleGetDisplay[U32](node:Pointer[YGNode] tag)
use @YGNodeStyleSetFlex[None](node:Pointer[YGNode] tag, flex:F32)
use @YGNodeStyleSetFlexGrow[None](node:Pointer[YGNode] tag, flexGrow:F32)
use @YGNodeStyleSetFlexShrink[None](node:Pointer[YGNode] tag, flexShrink:F32)
use @YGNodeStyleSetFlexBasis[None](node:Pointer[YGNode] tag, flexBasis:F32)
use @YGNodeStyleSetFlexBasisPercent[None](node:Pointer[YGNode] tag, flexBasis:F32)
use @YGNodeStyleSetFlexBasisAuto[None](node:Pointer[YGNode] tag)
use @YGNodeStyleSetPosition[None](node:Pointer[YGNode] tag, edge:U32, position:F32)
use @YGNodeStyleSetPositionPercent[None](node:Pointer[YGNode] tag, edge:U32, position:F32)
use @YGNodeStyleSetMargin[None](node:Pointer[YGNode] tag, edge:U32, margin:F32)
use @YGNodeStyleSetMarginPercent[None](node:Pointer[YGNode] tag, edge:U32, margin:F32)
use @YGNodeStyleSetMarginAuto[None](node:Pointer[YGNode] tag, edge:U32)
use @YGNodeStyleSetPadding[None](node:Pointer[YGNode] tag, edge:U32, padding:F32)
use @YGNodeStyleSetPaddingPercent[None](node:Pointer[YGNode] tag, edge:U32, padding:F32)
use @YGNodeStyleSetBorder[None](node:Pointer[YGNode] tag, edge:U32, border:F32)
use @YGNodeStyleSetWidth[None](node:Pointer[YGNode] tag, width:F32)
use @YGNodeStyleSetWidthPercent[None](node:Pointer[YGNode] tag, width:F32)
use @YGNodeStyleSetWidthAuto[None](node:Pointer[YGNode] tag)
use @YGNodeStyleSetHeight[None](node:Pointer[YGNode] tag, height:F32)
use @YGNodeStyleSetHeightPercent[None](node:Pointer[YGNode] tag, height:F32)
use @YGNodeStyleSetHeightAuto[None](node:Pointer[YGNode] tag)
use @YGNodeStyleSetMinWidth[None](node:Pointer[YGNode] tag, minWidth:F32)
use @YGNodeStyleSetMinWidthPercent[None](node:Pointer[YGNode] tag, minWidth:F32)
use @YGNodeStyleSetMinHeight[None](node:Pointer[YGNode] tag, minHeight:F32)
use @YGNodeStyleSetMinHeightPercent[None](node:Pointer[YGNode] tag, minHeight:F32)
use @YGNodeStyleSetMaxWidth[None](node:Pointer[YGNode] tag, maxWidth:F32)
use @YGNodeStyleSetMaxWidthPercent[None](node:Pointer[YGNode] tag, maxWidth:F32)
use @YGNodeStyleSetMaxHeight[None](node:Pointer[YGNode] tag, maxHeight:F32)
use @YGNodeStyleSetMaxHeightPercent[None](node:Pointer[YGNode] tag, maxHeight:F32)
use @YGNodeStyleSetAspectRatio[None](node:Pointer[YGNode] tag, aspectRatio:F32)
use @YGNodeLayoutGetLeft[F32](node:Pointer[YGNode] tag)
use @YGNodeLayoutGetTop[F32](node:Pointer[YGNode] tag)
use @YGNodeLayoutGetRight[F32](node:Pointer[YGNode] tag)
use @YGNodeLayoutGetBottom[F32](node:Pointer[YGNode] tag)
use @YGNodeLayoutGetWidth[F32](node:Pointer[YGNode] tag)
use @YGNodeLayoutGetHeight[F32](node:Pointer[YGNode] tag)
use @YGNodeLayoutGetDirection[U32](node:Pointer[YGNode] tag)
use @YGNodeLayoutGetHadOverflow[U32](node:Pointer[YGNode] tag)
use @YGNodeLayoutGetDidLegacyStretchFlagAffectLayout[U32](node:Pointer[YGNode] tag)
use @YGNodeLayoutGetMargin[F32](node:Pointer[YGNode] tag, edge:U32)
use @YGNodeLayoutGetBorder[F32](node:Pointer[YGNode] tag, edge:U32)
use @YGNodeLayoutGetPadding[F32](node:Pointer[YGNode] tag, edge:U32)
use @YGConfigSetLogger[None](config:Pointer[YGConfig] tag, logger:Pointer[None] tag)
use @YGAssert[None](condition:U32, message:Pointer[U8] tag)
use @YGAssertWithNode[None](node:Pointer[YGNode] tag, condition:U32, message:Pointer[U8] tag)
use @YGAssertWithConfig[None](config:Pointer[YGConfig] tag, condition:U32, message:Pointer[U8] tag)
use @YGConfigSetPointScaleFactor[None](config:Pointer[YGConfig] tag, pixelsInPoint:F32)
use @YGConfigSetShouldDiffLayoutWithoutLegacyStretchBehaviour[None](config:Pointer[YGConfig] tag, shouldDiffLayout:U32)
use @YGConfigSetUseLegacyStretchBehaviour[None](config:Pointer[YGConfig] tag, useLegacyStretchBehaviour:U32)
use @YGConfigNew[Pointer[YGConfig]]()
use @YGConfigFree[None](config:Pointer[YGConfig] tag)
use @YGConfigCopy[None](dest:Pointer[YGConfig] tag, src:Pointer[YGConfig] tag)
use @YGConfigGetInstanceCount[I64]()
use @YGConfigSetExperimentalFeatureEnabled[None](config:Pointer[YGConfig] tag, feature:U32, enabled:U32)
use @YGConfigIsExperimentalFeatureEnabled[U32](config:Pointer[YGConfig] tag, feature:U32)
use @YGConfigSetUseWebDefaults[None](config:Pointer[YGConfig] tag, enabled:U32)
use @YGConfigGetUseWebDefaults[U32](config:Pointer[YGConfig] tag)
use @YGConfigSetCloneNodeFunc[None](config:Pointer[YGConfig] tag, callback:Pointer[None] tag)
use @YGConfigGetDefault[Pointer[YGConfig]]()
use @YGConfigSetContext[None](config:Pointer[YGConfig] tag, context:Pointer[None] tag)
use @YGConfigGetContext[Pointer[None]](config:Pointer[YGConfig] tag)
use @YGRoundValueToPixelGrid[F32](value:F32, pointScaleFactor:F32, forceCeil:U32, forceFloor:U32)

// For these, Yoga uses a "CompactValue" which is an overloaded float value. From the horses mouth:
//
// This class stores YGValue in 32 bits.
// - The value does not matter for Undefined and Auto. NaNs are used for their
//   representation.
// - To differentiate between Point and Percent, one exponent bit is used.
//   Supported the range [0x40, 0xbf] (0xbf is inclusive for point, but
//   exclusive for percent).
// - Value ranges:
//   points:  1.08420217e-19f to 36893485948395847680
//            0x00000000         0x3fffffff
//   percent: 1.08420217e-19f to 18446742974197923840
//            0x40000000         0x7f7fffff
// - Zero is supported, negative zero is not
// - values outside of the representable range are clamped
//
// So, we make these return "U32", and we provide a primitive to allow our code to convert these values to their actual values

use @YGNodeStyleGetFlex[U32](node:Pointer[YGNode] tag)
use @YGNodeStyleGetFlexGrow[U32](node:Pointer[YGNode] tag)
use @YGNodeStyleGetFlexShrink[U32](node:Pointer[YGNode] tag)
use @YGNodeStyleGetFlexBasis[U32](node:Pointer[YGNode] tag)
use @YGNodeStyleGetPosition[U32](node:Pointer[YGNode] tag, edge:U32)
use @YGNodeStyleGetMargin[U32](node:Pointer[YGNode] tag, edge:U32)
use @YGNodeStyleGetPadding[U32](node:Pointer[YGNode] tag, edge:U32)
use @YGNodeStyleGetBorder[U32](node:Pointer[YGNode] tag, edge:U32)
use @YGNodeStyleGetWidth[U32](node:Pointer[YGNode] tag)
use @YGNodeStyleGetHeight[U32](node:Pointer[YGNode] tag)
use @YGNodeStyleGetMinWidth[U32](node:Pointer[YGNode] tag)
use @YGNodeStyleGetMinHeight[U32](node:Pointer[YGNode] tag)
use @YGNodeStyleGetMaxWidth[U32](node:Pointer[YGNode] tag)
use @YGNodeStyleGetMaxHeight[U32](node:Pointer[YGNode] tag)
use @YGNodeStyleGetAspectRatio[U32](node:Pointer[YGNode] tag)

use @YGNodeStyleGetFlexFloat[F32](node:Pointer[YGNode] tag)
use @YGNodeStyleGetFlexGrowFloat[F32](node:Pointer[YGNode] tag)
use @YGNodeStyleGetFlexShrinkFloat[F32](node:Pointer[YGNode] tag)
use @YGNodeStyleGetFlexBasisFloat[F32](node:Pointer[YGNode] tag)
use @YGNodeStyleGetPositionFloat[F32](node:Pointer[YGNode] tag, edge:U32)
use @YGNodeStyleGetMarginFloat[F32](node:Pointer[YGNode] tag, edge:U32)
use @YGNodeStyleGetPaddingFloat[F32](node:Pointer[YGNode] tag, edge:U32)
use @YGNodeStyleGetBorderFloat[F32](node:Pointer[YGNode] tag, edge:U32)
use @YGNodeStyleGetWidthFloat[F32](node:Pointer[YGNode] tag)
use @YGNodeStyleGetHeightFloat[F32](node:Pointer[YGNode] tag)
use @YGNodeStyleGetMinWidthFloat[F32](node:Pointer[YGNode] tag)
use @YGNodeStyleGetMinHeightFloat[F32](node:Pointer[YGNode] tag)
use @YGNodeStyleGetMaxWidthFloat[F32](node:Pointer[YGNode] tag)
use @YGNodeStyleGetMaxHeightFloat[F32](node:Pointer[YGNode] tag)
use @YGNodeStyleGetAspectRatioFloat[F32](node:Pointer[YGNode] tag)